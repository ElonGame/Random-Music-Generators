"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Object representation of the chunk section of a MIDI file.
 * @param {object} fields - {type: number, data: array, size: array}
 * @return {Chunk}
 */
var Chunk = function Chunk(fields) {
	_classCallCheck(this, Chunk);

	this.type = fields.type;
	this.data = fields.data;
	this.size = [0, 0, 0, fields.data.length];
};

exports.Chunk = Chunk;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNodW5rLmpzIl0sIm5hbWVzIjpbIkNodW5rIiwiZmllbGRzIiwidHlwZSIsImRhdGEiLCJzaXplIiwibGVuZ3RoIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7OztJQUtNQSxLLEdBQ0wsZUFBWUMsTUFBWixFQUFvQjtBQUFBOztBQUNuQixNQUFLQyxJQUFMLEdBQVlELE9BQU9DLElBQW5CO0FBQ0EsTUFBS0MsSUFBTCxHQUFZRixPQUFPRSxJQUFuQjtBQUNBLE1BQUtDLElBQUwsR0FBWSxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVSCxPQUFPRSxJQUFQLENBQVlFLE1BQXRCLENBQVo7QUFDQSxDOztRQUdNTCxLLEdBQUFBLEsiLCJmaWxlIjoiY2h1bmsuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGUgY2h1bmsgc2VjdGlvbiBvZiBhIE1JREkgZmlsZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSBmaWVsZHMgLSB7dHlwZTogbnVtYmVyLCBkYXRhOiBhcnJheSwgc2l6ZTogYXJyYXl9XG4gKiBAcmV0dXJuIHtDaHVua31cbiAqL1xuY2xhc3MgQ2h1bmsge1xuXHRjb25zdHJ1Y3RvcihmaWVsZHMpIHtcblx0XHR0aGlzLnR5cGUgPSBmaWVsZHMudHlwZTtcblx0XHR0aGlzLmRhdGEgPSBmaWVsZHMuZGF0YTtcblx0XHR0aGlzLnNpemUgPSBbMCwgMCwgMCwgZmllbGRzLmRhdGEubGVuZ3RoXTtcblx0fVxufVxuXG5leHBvcnQge0NodW5rfTtcbiJdfQ==
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
/**
 * MIDI file format constants, including note -> MIDI number translation.
 * @return {Constants}
 */

var Constants = {
	VERSION: '1.4.7',
	HEADER_CHUNK_TYPE: [0x4d, 0x54, 0x68, 0x64], // Mthd
	HEADER_CHUNK_LENGTH: [0x00, 0x00, 0x00, 0x06], // Header size for SMF
	HEADER_CHUNK_FORMAT0: [0x00, 0x00], // Midi Type 0 id
	HEADER_CHUNK_FORMAT1: [0x00, 0x01], // Midi Type 1 id
	HEADER_CHUNK_DIVISION: [0x00, 0x80], // Defaults to 128 ticks per beat
	TRACK_CHUNK_TYPE: [0x4d, 0x54, 0x72, 0x6b], // MTrk,
	META_EVENT_ID: 0xFF,
	META_TEXT_ID: 0x01,
	META_COPYRIGHT_ID: 0x02,
	META_TRACK_NAME_ID: 0x03,
	META_INSTRUMENT_NAME_ID: 0x04,
	META_LYRIC_ID: 0x05,
	META_MARKER_ID: 0x06,
	META_CUE_POINT: 0x07,
	META_TEMPO_ID: 0x51,
	META_SMTPE_OFFSET: 0x54,
	META_TIME_SIGNATURE_ID: 0x58,
	META_KEY_SIGNATURE_ID: 0x59,
	META_END_OF_TRACK_ID: [0x2F, 0x00],
	PROGRAM_CHANGE_STATUS: 0xC0 };

exports.Constants = Constants;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbnN0YW50cy5qcyJdLCJuYW1lcyI6WyJDb25zdGFudHMiLCJWRVJTSU9OIiwiSEVBREVSX0NIVU5LX1RZUEUiLCJIRUFERVJfQ0hVTktfTEVOR1RIIiwiSEVBREVSX0NIVU5LX0ZPUk1BVDAiLCJIRUFERVJfQ0hVTktfRk9STUFUMSIsIkhFQURFUl9DSFVOS19ESVZJU0lPTiIsIlRSQUNLX0NIVU5LX1RZUEUiLCJNRVRBX0VWRU5UX0lEIiwiTUVUQV9URVhUX0lEIiwiTUVUQV9DT1BZUklHSFRfSUQiLCJNRVRBX1RSQUNLX05BTUVfSUQiLCJNRVRBX0lOU1RSVU1FTlRfTkFNRV9JRCIsIk1FVEFfTFlSSUNfSUQiLCJNRVRBX01BUktFUl9JRCIsIk1FVEFfQ1VFX1BPSU5UIiwiTUVUQV9URU1QT19JRCIsIk1FVEFfU01UUEVfT0ZGU0VUIiwiTUVUQV9USU1FX1NJR05BVFVSRV9JRCIsIk1FVEFfS0VZX1NJR05BVFVSRV9JRCIsIk1FVEFfRU5EX09GX1RSQUNLX0lEIiwiUFJPR1JBTV9DSEFOR0VfU1RBVFVTIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBOzs7OztBQUtBLElBQUlBLFlBQVk7QUFDZkMsVUFBYyxPQURDO0FBRWZDLG9CQUF1QixDQUFDLElBQUQsRUFBTyxJQUFQLEVBQWEsSUFBYixFQUFtQixJQUFuQixDQUZSLEVBRWtDO0FBQ2pEQyxzQkFBd0IsQ0FBQyxJQUFELEVBQU8sSUFBUCxFQUFhLElBQWIsRUFBbUIsSUFBbkIsQ0FIVCxFQUdtQztBQUNsREMsdUJBQTBCLENBQUMsSUFBRCxFQUFPLElBQVAsQ0FKWCxFQUl5QjtBQUN4Q0MsdUJBQTBCLENBQUMsSUFBRCxFQUFPLElBQVAsQ0FMWCxFQUt5QjtBQUN4Q0Msd0JBQTBCLENBQUMsSUFBRCxFQUFPLElBQVAsQ0FOWCxFQU15QjtBQUN4Q0MsbUJBQW9CLENBQUMsSUFBRCxFQUFPLElBQVAsRUFBYSxJQUFiLEVBQW1CLElBQW5CLENBUEwsRUFPK0I7QUFDOUNDLGdCQUFrQixJQVJIO0FBU2ZDLGVBQWlCLElBVEY7QUFVZkMsb0JBQXFCLElBVk47QUFXZkMscUJBQXNCLElBWFA7QUFZZkMsMEJBQTBCLElBWlg7QUFhZkMsZ0JBQWtCLElBYkg7QUFjZkMsaUJBQW1CLElBZEo7QUFlZkMsaUJBQW1CLElBZko7QUFnQmZDLGdCQUFrQixJQWhCSDtBQWlCZkMsb0JBQXFCLElBakJOO0FBa0JmQyx5QkFBeUIsSUFsQlY7QUFtQmZDLHdCQUF3QixJQW5CVDtBQW9CZkMsdUJBQXVCLENBQUMsSUFBRCxFQUFPLElBQVAsQ0FwQlI7QUFxQmZDLHdCQUF3QixJQXJCVCxFQUFoQjs7UUF3QlFyQixTLEdBQUFBLFMiLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBNSURJIGZpbGUgZm9ybWF0IGNvbnN0YW50cywgaW5jbHVkaW5nIG5vdGUgLT4gTUlESSBudW1iZXIgdHJhbnNsYXRpb24uXG4gKiBAcmV0dXJuIHtDb25zdGFudHN9XG4gKi9cblxudmFyIENvbnN0YW50cyA9IHtcblx0VkVSU0lPTlx0XHRcdFx0XHQ6ICcxLjQuNycsXG5cdEhFQURFUl9DSFVOS19UWVBFICBcdFx0OiBbMHg0ZCwgMHg1NCwgMHg2OCwgMHg2NF0sIC8vIE10aGRcblx0SEVBREVSX0NIVU5LX0xFTkdUSCAgXHQ6IFsweDAwLCAweDAwLCAweDAwLCAweDA2XSwgLy8gSGVhZGVyIHNpemUgZm9yIFNNRlxuXHRIRUFERVJfQ0hVTktfRk9STUFUMCAgICA6IFsweDAwLCAweDAwXSwgLy8gTWlkaSBUeXBlIDAgaWRcblx0SEVBREVSX0NIVU5LX0ZPUk1BVDEgICAgOiBbMHgwMCwgMHgwMV0sIC8vIE1pZGkgVHlwZSAxIGlkXG5cdEhFQURFUl9DSFVOS19ESVZJU0lPTiAgIDogWzB4MDAsIDB4ODBdLCAvLyBEZWZhdWx0cyB0byAxMjggdGlja3MgcGVyIGJlYXRcblx0VFJBQ0tfQ0hVTktfVFlQRVx0XHQ6IFsweDRkLCAweDU0LCAweDcyLCAweDZiXSwgLy8gTVRyayxcblx0TUVUQV9FVkVOVF9JRFx0XHRcdDogMHhGRixcblx0TUVUQV9URVhUX0lEXHRcdFx0OiAweDAxLFxuXHRNRVRBX0NPUFlSSUdIVF9JRFx0XHQ6IDB4MDIsXG5cdE1FVEFfVFJBQ0tfTkFNRV9JRFx0XHQ6IDB4MDMsXG5cdE1FVEFfSU5TVFJVTUVOVF9OQU1FX0lEIDogMHgwNCxcblx0TUVUQV9MWVJJQ19JRFx0XHRcdDogMHgwNSxcblx0TUVUQV9NQVJLRVJfSURcdFx0XHQ6IDB4MDYsXG5cdE1FVEFfQ1VFX1BPSU5UXHRcdFx0OiAweDA3LFxuXHRNRVRBX1RFTVBPX0lEXHRcdFx0OiAweDUxLFxuXHRNRVRBX1NNVFBFX09GRlNFVFx0XHQ6IDB4NTQsXG5cdE1FVEFfVElNRV9TSUdOQVRVUkVfSURcdDogMHg1OCxcblx0TUVUQV9LRVlfU0lHTkFUVVJFX0lEXHQ6IDB4NTksXG5cdE1FVEFfRU5EX09GX1RSQUNLX0lEXHQ6IFsweDJGLCAweDAwXSxcblx0UFJPR1JBTV9DSEFOR0VfU1RBVFVTXHQ6IDB4QzAsIC8vIGluY2x1ZGVzIGNoYW5uZWwgbnVtYmVyICgwKVxufTtcblxuZXhwb3J0IHtDb25zdGFudHN9O1xuIl19
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Object representation of a meta event.
 * @param {object} fields - type, data
 * @return {MetaEvent}
 */
var MetaEvent = function MetaEvent(fields) {
	_classCallCheck(this, MetaEvent);

	this.type = 'meta';
	this.data = Utils.numberToVariableLength(0x00); // Start with zero time delta
	this.data = this.data.concat(Constants.META_EVENT_ID, fields.data);
};

exports.MetaEvent = MetaEvent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1ldGEtZXZlbnQuanMiXSwibmFtZXMiOlsiTWV0YUV2ZW50IiwiZmllbGRzIiwidHlwZSIsImRhdGEiLCJVdGlscyIsIm51bWJlclRvVmFyaWFibGVMZW5ndGgiLCJjb25jYXQiLCJDb25zdGFudHMiLCJNRVRBX0VWRU5UX0lEIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7OztJQUtNQSxTLEdBQ0wsbUJBQVlDLE1BQVosRUFBb0I7QUFBQTs7QUFDbkIsTUFBS0MsSUFBTCxHQUFZLE1BQVo7QUFDQSxNQUFLQyxJQUFMLEdBQVlDLE1BQU1DLHNCQUFOLENBQTZCLElBQTdCLENBQVosQ0FGbUIsQ0FFNEI7QUFDL0MsTUFBS0YsSUFBTCxHQUFZLEtBQUtBLElBQUwsQ0FBVUcsTUFBVixDQUFpQkMsVUFBVUMsYUFBM0IsRUFBMENQLE9BQU9FLElBQWpELENBQVo7QUFDQSxDOztRQUdNSCxTLEdBQUFBLFMiLCJmaWxlIjoibWV0YS1ldmVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogT2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIGEgbWV0YSBldmVudC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBmaWVsZHMgLSB0eXBlLCBkYXRhXG4gKiBAcmV0dXJuIHtNZXRhRXZlbnR9XG4gKi9cbmNsYXNzIE1ldGFFdmVudCB7XG5cdGNvbnN0cnVjdG9yKGZpZWxkcykge1xuXHRcdHRoaXMudHlwZSA9ICdtZXRhJztcblx0XHR0aGlzLmRhdGEgPSBVdGlscy5udW1iZXJUb1ZhcmlhYmxlTGVuZ3RoKDB4MDApOy8vIFN0YXJ0IHdpdGggemVybyB0aW1lIGRlbHRhXG5cdFx0dGhpcy5kYXRhID0gdGhpcy5kYXRhLmNvbmNhdChDb25zdGFudHMuTUVUQV9FVkVOVF9JRCwgZmllbGRzLmRhdGEpO1xuXHR9XG59XG5cbmV4cG9ydCB7TWV0YUV2ZW50fTtcbiJdfQ==
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Wrapper for noteOnEvent/noteOffEvent objects that builds both events.
 * @param {object} fields - {pitch: '[C4]', duration: '4', wait: '4', velocity: 1-100}
 * @return {NoteEvent}
 */
var NoteEvent = function () {
	function NoteEvent(fields) {
		_classCallCheck(this, NoteEvent);

		this.type = 'note';
		this.pitch = fields.pitch;
		this.wait = fields.wait || 0;
		this.duration = fields.duration;
		this.sequential = fields.sequential || false;
		this.velocity = fields.velocity || 50;
		this.channel = fields.channel || 1;
		this.repeat = fields.repeat || 1;
		this.velocity = this.convertVelocity(this.velocity);
		this.buildData();
	}

	/**
  * Builds int array for this event.
  * @return {NoteEvent}
  */


	_createClass(NoteEvent, [{
		key: 'buildData',
		value: function buildData() {
			this.data = [];

			var tickDuration = this.getTickDuration(this.duration, 'note');
			var restDuration = this.getTickDuration(this.wait, 'rest');

			// fields.pitch could be an array of pitches.
			// If so create note events for each and apply the same duration.
			var noteOn, noteOff;
			if (Array.isArray(this.pitch)) {
				// By default this is a chord if it's an array of notes that requires one NoteOnEvent.
				// If this.sequential === true then it's a sequential string of notes that requires separate NoteOnEvents.
				if (!this.sequential) {
					// Handle repeat
					for (var j = 0; j < this.repeat; j++) {
						// Note on
						this.pitch.forEach(function (p, i) {
							if (i == 0) {
								noteOn = new NoteOnEvent({ data: Utils.numberToVariableLength(restDuration).concat(this.getNoteOnStatus(), Utils.getPitch(p), this.velocity) });
							} else {
								// Running status (can ommit the note on status)
								noteOn = new NoteOnEvent({ data: [0, Utils.getPitch(p), this.velocity] });
							}

							this.data = this.data.concat(noteOn.data);
						}, this);

						// Note off
						this.pitch.forEach(function (p, i) {
							if (i == 0) {
								noteOff = new NoteOffEvent({ data: Utils.numberToVariableLength(tickDuration).concat(this.getNoteOffStatus(), Utils.getPitch(p), this.velocity) });
							} else {
								// Running status (can ommit the note off status)
								noteOff = new NoteOffEvent({ data: [0, Utils.getPitch(p), this.velocity] });
							}

							this.data = this.data.concat(noteOff.data);
						}, this);
					}
				} else {
					// Handle repeat
					for (var j = 0; j < this.repeat; j++) {
						this.pitch.forEach(function (p, i) {
							// restDuration only applies to first note
							if (i > 0) {
								restDuration = 0;
							}

							// If duration is 8th triplets we need to make sure that the total ticks == quarter note.
							// So, the last one will need to be the remainder
							if (this.duration === '8t' && i == this.pitch.length - 1) {
								var quarterTicks = Utils.numberFromBytes(Constants.HEADER_CHUNK_DIVISION);
								tickDuration = quarterTicks - tickDuration * 2;
							}

							noteOn = new NoteOnEvent({ data: Utils.numberToVariableLength(restDuration).concat([this.getNoteOnStatus(), Utils.getPitch(p), this.velocity]) });
							noteOff = new NoteOffEvent({ data: Utils.numberToVariableLength(tickDuration).concat([this.getNoteOffStatus(), Utils.getPitch(p), this.velocity]) });

							this.data = this.data.concat(noteOn.data, noteOff.data);
						}, this);
					}
				}

				return this;
			}

			throw 'pitch must be an array.';
		}
	}, {
		key: 'convertVelocity',


		/**
   * Converts velocity to value 0-127
   * @param {number} velocity - Velocity value 1-100
   * @return {number}
   */
		value: function convertVelocity(velocity) {
			// Max passed value limited to 100
			velocity = velocity > 100 ? 100 : velocity;
			return Math.round(velocity / 100 * 127);
		}
	}, {
		key: 'getTickDuration',


		/**
   * Gets the total number of ticks based on passed duration.
   * Note: type=='note' defaults to quarter note, type==='rest' defaults to 0
   * @param {(string|array)} duration
   * @param {string} type ['note', 'rest']
   * @return {number}
   */
		value: function getTickDuration(duration, type) {
			if (Array.isArray(duration)) {
				// Recursively execute this method for each item in the array and return the sum of tick durations.
				return duration.map(function (value) {
					return this.getTickDuration(value, type);
				}, this).reduce(function (a, b) {
					return a + b;
				}, 0);
			}

			duration = duration.toString();

			if (duration.toLowerCase().charAt(0) === 't') {
				// If duration starts with 't' then the number that follows is an explicit tick count
				return parseInt(duration.substring(1));
			}

			// Need to apply duration here.  Quarter note == Constants.HEADER_CHUNK_DIVISION
			// Rounding only applies to triplets, which the remainder is handled below
			var quarterTicks = Utils.numberFromBytes(Constants.HEADER_CHUNK_DIVISION);
			return Math.round(quarterTicks * this.getDurationMultiplier(duration, type));
		}

		/**
   * Gets what to multiple ticks/quarter note by to get the specified duration.
   * Note: type=='note' defaults to quarter note, type==='rest' defaults to 0
   * @param {string} duration
   * @param {string} type ['note','rest']
   * @return {number}
   */

	}, {
		key: 'getDurationMultiplier',
		value: function getDurationMultiplier(duration, type) {
			// Need to apply duration here.  Quarter note == Constants.HEADER_CHUNK_DIVISION
			switch (duration) {
				case '0':
					return 0;
				case '1':
					return 4;
				case '2':
					return 2;
				case 'd2':
					return 3;
				case '4':
					return 1;
				case 'd4':
					return 1.5;
				case '8':
					return 0.5;
				case '8t':
					// For 8th triplets, let's divide a quarter by 3, round to the nearest int, and substract the remainder to the last one.
					return 0.33;
				case 'd8':
					return 0.75;
				case '16':
					return 0.25;
				default:
				// Notes default to a quarter, rests default to 0
				//return type === 'note' ? 1 : 0;
			}

			throw duration + ' is not a valid duration.';
		}
	}, {
		key: 'getNoteOnStatus',


		/**
   * Gets the note on status code based on the selected channel. 0x9{0-F}
   * Note on at channel 0 is 0x90 (144)
   * 0 = Ch 1
   * @return {number}
   */
		value: function getNoteOnStatus() {
			return 144 + this.channel - 1;
		}

		/**
   * Gets the note off status code based on the selected channel. 0x8{0-F}
   * Note off at channel 0 is 0x80 (128)
   * 0 = Ch 1
   * @return {number}
   */

	}, {
		key: 'getNoteOffStatus',
		value: function getNoteOffStatus() {
			return 128 + this.channel - 1;
		}
	}]);

	return NoteEvent;
}();

exports.NoteEvent = NoteEvent;
//# sourceMappingURL=data:application/json;base64,
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Holds all data for a "note off" MIDI event
 * @param {object} fields {data: []}
 * @return {NoteOffEvent}
 */
var NoteOffEvent = function NoteOffEvent(fields) {
  _classCallCheck(this, NoteOffEvent);

  this.data = fields.data;
};

exports.NoteOffEvent = NoteOffEvent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vdGUtb2ZmLWV2ZW50LmpzIl0sIm5hbWVzIjpbIk5vdGVPZmZFdmVudCIsImZpZWxkcyIsImRhdGEiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7Ozs7O0lBS01BLFksR0FDTCxzQkFBWUMsTUFBWixFQUFvQjtBQUFBOztBQUNuQixPQUFLQyxJQUFMLEdBQVlELE9BQU9DLElBQW5CO0FBQ0EsQzs7UUFHTUYsWSxHQUFBQSxZIiwiZmlsZSI6Im5vdGUtb2ZmLWV2ZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBIb2xkcyBhbGwgZGF0YSBmb3IgYSBcIm5vdGUgb2ZmXCIgTUlESSBldmVudFxuICogQHBhcmFtIHtvYmplY3R9IGZpZWxkcyB7ZGF0YTogW119XG4gKiBAcmV0dXJuIHtOb3RlT2ZmRXZlbnR9XG4gKi9cbmNsYXNzIE5vdGVPZmZFdmVudCB7XG5cdGNvbnN0cnVjdG9yKGZpZWxkcykge1xuXHRcdHRoaXMuZGF0YSA9IGZpZWxkcy5kYXRhO1xuXHR9XG59XG5cbmV4cG9ydCB7Tm90ZU9mZkV2ZW50fTtcbiJdfQ==
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Holds all data for a "note on" MIDI event
 * @param {object} fields {data: []}
 * @return {NoteOnEvent}
 */
var NoteOnEvent = function NoteOnEvent(fields) {
  _classCallCheck(this, NoteOnEvent);

  this.data = fields.data;
};

exports.NoteOnEvent = NoteOnEvent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vdGUtb24tZXZlbnQuanMiXSwibmFtZXMiOlsiTm90ZU9uRXZlbnQiLCJmaWVsZHMiLCJkYXRhIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7OztJQUtNQSxXLEdBQ0wscUJBQVlDLE1BQVosRUFBb0I7QUFBQTs7QUFDbkIsT0FBS0MsSUFBTCxHQUFZRCxPQUFPQyxJQUFuQjtBQUNBLEM7O1FBR01GLFcsR0FBQUEsVyIsImZpbGUiOiJub3RlLW9uLWV2ZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBIb2xkcyBhbGwgZGF0YSBmb3IgYSBcIm5vdGUgb25cIiBNSURJIGV2ZW50XG4gKiBAcGFyYW0ge29iamVjdH0gZmllbGRzIHtkYXRhOiBbXX1cbiAqIEByZXR1cm4ge05vdGVPbkV2ZW50fVxuICovXG5jbGFzcyBOb3RlT25FdmVudCB7XG5cdGNvbnN0cnVjdG9yKGZpZWxkcykge1xuXHRcdHRoaXMuZGF0YSA9IGZpZWxkcy5kYXRhO1xuXHR9XG59XG5cbmV4cG9ydCB7Tm90ZU9uRXZlbnR9O1xuIl19
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Holds all data for a "program change" MIDI event
 * @param {object} fields {type: string, data: []}
 * @return {NoteOffEvent}
 */
var ProgramChangeEvent = function ProgramChangeEvent(fields) {
	_classCallCheck(this, ProgramChangeEvent);

	this.type = 'program';
	// delta time defaults to 0.
	this.data = Utils.numberToVariableLength(0x00).concat(Constants.PROGRAM_CHANGE_STATUS, fields.instrument);
};

exports.ProgramChangeEvent = ProgramChangeEvent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByb2dyYW0tY2hhbmdlLWV2ZW50LmpzIl0sIm5hbWVzIjpbIlByb2dyYW1DaGFuZ2VFdmVudCIsImZpZWxkcyIsInR5cGUiLCJkYXRhIiwiVXRpbHMiLCJudW1iZXJUb1ZhcmlhYmxlTGVuZ3RoIiwiY29uY2F0IiwiQ29uc3RhbnRzIiwiUFJPR1JBTV9DSEFOR0VfU1RBVFVTIiwiaW5zdHJ1bWVudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7Ozs7SUFLTUEsa0IsR0FDTCw0QkFBWUMsTUFBWixFQUFvQjtBQUFBOztBQUNuQixNQUFLQyxJQUFMLEdBQVksU0FBWjtBQUNBO0FBQ0EsTUFBS0MsSUFBTCxHQUFZQyxNQUFNQyxzQkFBTixDQUE2QixJQUE3QixFQUFtQ0MsTUFBbkMsQ0FBMENDLFVBQVVDLHFCQUFwRCxFQUEyRVAsT0FBT1EsVUFBbEYsQ0FBWjtBQUNBLEM7O1FBR01ULGtCLEdBQUFBLGtCIiwiZmlsZSI6InByb2dyYW0tY2hhbmdlLWV2ZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBIb2xkcyBhbGwgZGF0YSBmb3IgYSBcInByb2dyYW0gY2hhbmdlXCIgTUlESSBldmVudFxuICogQHBhcmFtIHtvYmplY3R9IGZpZWxkcyB7dHlwZTogc3RyaW5nLCBkYXRhOiBbXX1cbiAqIEByZXR1cm4ge05vdGVPZmZFdmVudH1cbiAqL1xuY2xhc3MgUHJvZ3JhbUNoYW5nZUV2ZW50IHtcblx0Y29uc3RydWN0b3IoZmllbGRzKSB7XG5cdFx0dGhpcy50eXBlID0gJ3Byb2dyYW0nO1xuXHRcdC8vIGRlbHRhIHRpbWUgZGVmYXVsdHMgdG8gMC5cblx0XHR0aGlzLmRhdGEgPSBVdGlscy5udW1iZXJUb1ZhcmlhYmxlTGVuZ3RoKDB4MDApLmNvbmNhdChDb25zdGFudHMuUFJPR1JBTV9DSEFOR0VfU1RBVFVTLCBmaWVsZHMuaW5zdHJ1bWVudCk7XG5cdH1cbn1cblxuZXhwb3J0IHtQcm9ncmFtQ2hhbmdlRXZlbnR9O1xuIl19
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Holds all data for a track.
 * @param {object} fields {type: number, data: array, size: array, events: array}
 * @return {Track}
 */
var Track = function () {
	function Track() {
		_classCallCheck(this, Track);

		this.type = Constants.TRACK_CHUNK_TYPE;
		this.data = [];
		this.size = [];
		this.events = [];
	}

	/**
  * Adds any event type to the track.
  * @param {(NoteEvent|MetaEvent|ProgramChangeEvent)} event - Event object.
  * @param {function} mapFunction - Callback which can be used to apply specific properties to all events. 
  * @return {Track}
  */


	_createClass(Track, [{
		key: 'addEvent',
		value: function addEvent(event, mapFunction) {
			if (Array.isArray(event)) {
				event.forEach(function (e, i) {
					// Handle map function if provided
					if (typeof mapFunction === 'function' && e.type === 'note') {
						var properties = mapFunction(i, e);

						if ((typeof properties === 'undefined' ? 'undefined' : _typeof(properties)) === 'object') {
							for (var j in properties) {
								switch (j) {
									case 'duration':
										e.duration = properties[j];
										break;
									case 'sequential':
										e.sequential = properties[j];
										break;
									case 'velocity':
										e.velocity = e.convertVelocity(properties[j]);
										break;
								}
							}

							// Gotta build that data
							e.buildData();
						}
					}

					this.data = this.data.concat(e.data);
					this.size = Utils.numberToBytes(this.data.length, 4); // 4 bytes long
					this.events.push(e);
				}, this);
			} else {
				this.data = this.data.concat(event.data);
				this.size = Utils.numberToBytes(this.data.length, 4); // 4 bytes long
				this.events.push(event);
			}

			return this;
		}

		/**
   * Sets tempo of the MIDI file.
   * @param {number} bpm - Tempo in beats per minute.
   * @return {Track}
   */

	}, {
		key: 'setTempo',
		value: function setTempo(bpm) {
			var event = new MetaEvent({ data: [Constants.META_TEMPO_ID] });
			event.data.push(0x03); // Size
			var tempo = Math.round(60000000 / bpm);
			event.data = event.data.concat(Utils.numberToBytes(tempo, 3)); // Tempo, 3 bytes
			return this.addEvent(event);
		}

		/**
   * Sets time signature.
   * @param {number} numerator - Top number of the time signature.
   * @param {number} denominator - Bottom number of the time signature.
   * @param {number} midiclockspertick - Defaults to 24.
   * @param {number} notespermidiclock - Defaults to 8.
   * @return {Track}
   */

	}, {
		key: 'setTimeSignature',
		value: function setTimeSignature(numerator, denominator, midiclockspertick, notespermidiclock) {
			midiclockspertick = midiclockspertick || 24;
			notespermidiclock = notespermidiclock || 8;

			var event = new MetaEvent({ data: [Constants.META_TIME_SIGNATURE_ID] });
			event.data.push(0x04); // Size
			event.data = event.data.concat(Utils.numberToBytes(numerator, 1)); // Numerator, 1 bytes

			var _denominator = Math.log2(denominator); // Denominator is expressed as pow of 2
			event.data = event.data.concat(Utils.numberToBytes(_denominator, 1)); // Denominator, 1 bytes
			event.data = event.data.concat(Utils.numberToBytes(midiclockspertick, 1)); // MIDI Clocks per tick, 1 bytes
			event.data = event.data.concat(Utils.numberToBytes(notespermidiclock, 1)); // Number of 1/32 notes per MIDI clocks, 1 bytes
			return this.addEvent(event);
		}

		/**
   * Sets key signature.
   * @param {*} sf - 
   * @param {*} mi -
   * @return {Track}
   */

	}, {
		key: 'setKeySignature',
		value: function setKeySignature(sf, mi) {
			var event = new MetaEvent({ data: [Constants.META_KEY_SIGNATURE_ID] });
			event.data.push(0x02); // Size

			var mode = mi || 0;
			sf = sf || 0;

			//	Function called with string notation
			if (typeof mi === 'undefined') {
				var fifths = [['Cb', 'Gb', 'Db', 'Ab', 'Eb', 'Bb', 'F', 'C', 'G', 'D', 'A', 'E', 'B', 'F#', 'C#'], ['ab', 'eb', 'bb', 'f', 'c', 'g', 'd', 'a', 'e', 'b', 'f#', 'c#', 'g#', 'd#', 'a#']];
				var _sflen = sf.length;
				var note = sf || 'C';

				if (sf[0] === sf[0].toLowerCase()) mode = 1;

				if (_sflen > 1) {
					switch (sf.charAt(_sflen - 1)) {
						case 'm':
							mode = 1;
							note = sf.charAt(0).toLowerCase();
							note = note.concat(sf.substring(1, _sflen - 1));
							break;
						case '-':
							mode = 1;
							note = sf.charAt(0).toLowerCase();
							note = note.concat(sf.substring(1, _sflen - 1));
							break;
						case 'M':
							mode = 0;
							note = sf.charAt(0).toUpperCase();
							note = note.concat(sf.substring(1, _sflen - 1));
							break;
						case '+':
							mode = 0;
							note = sf.charAt(0).toUpperCase();
							note = note.concat(sf.substring(1, _sflen - 1));
							break;
					}
				}

				var fifthindex = fifths[mode].indexOf(note);
				sf = fifthindex === -1 ? 0 : fifthindex - 7;
			}

			event.data = event.data.concat(Utils.numberToBytes(sf, 1)); // Number of sharp or flats ( < 0 flat; > 0 sharp)
			event.data = event.data.concat(Utils.numberToBytes(mode, 1)); // Mode: 0 major, 1 minor
			return this.addEvent(event);
		}

		/**
   * Adds text to MIDI file.
   * @param {string} text - Text to add.
   * @return {Track}
   */

	}, {
		key: 'addText',
		value: function addText(text) {
			var event = new MetaEvent({ data: [Constants.META_TEXT_ID] });
			var stringBytes = Utils.stringToBytes(text);
			event.data = event.data.concat(Utils.numberToVariableLength(stringBytes.length)); // Size
			event.data = event.data.concat(stringBytes); // Text
			return this.addEvent(event);
		}

		/**
   * Adds copyright to MIDI file.
   * @param {string} text - Text of copyright line.
   * @return {Track}
   */

	}, {
		key: 'addCopyright',
		value: function addCopyright(text) {
			var event = new MetaEvent({ data: [Constants.META_COPYRIGHT_ID] });
			var stringBytes = Utils.stringToBytes(text);
			event.data = event.data.concat(Utils.numberToVariableLength(stringBytes.length)); // Size
			event.data = event.data.concat(stringBytes); // Text
			return this.addEvent(event);
		}

		/**
   * Adds Sequence/Track Name.
   * @param {string} text - Text of track name.
   * @return {Track}
   */

	}, {
		key: 'addTrackName',
		value: function addTrackName(text) {
			var event = new MetaEvent({ data: [Constants.META_TRACK_NAME_ID] });
			var stringBytes = Utils.stringToBytes(text);
			event.data = event.data.concat(Utils.numberToVariableLength(stringBytes.length)); // Size
			event.data = event.data.concat(stringBytes); // Text
			return this.addEvent(event);
		}

		/**
   * Sets instrument name of track.
   * @param {string} text - Name of instrument.
   * @return {Track}
   */

	}, {
		key: 'addInstrumentName',
		value: function addInstrumentName(text) {
			var event = new MetaEvent({ data: [Constants.META_INSTRUMENT_NAME_ID] });
			var stringBytes = Utils.stringToBytes(text);
			event.data = event.data.concat(Utils.numberToVariableLength(stringBytes.length)); // Size
			event.data = event.data.concat(stringBytes); // Text
			return this.addEvent(event);
		}

		/**
   * Adds marker to MIDI file.
   * @param {string} text - Marker text.
   * @return {Track}
   */

	}, {
		key: 'addMarker',
		value: function addMarker(text) {
			var event = new MetaEvent({ data: [Constants.META_MARKER_ID] });
			var stringBytes = Utils.stringToBytes(text);
			event.data = event.data.concat(Utils.numberToVariableLength(stringBytes.length)); // Size
			event.data = event.data.concat(stringBytes); // Text
			return this.addEvent(event);
		}

		/**
   * Adds cue point to MIDI file.
   * @param {string} text - Text of cue point.
   * @return {Track}
   */

	}, {
		key: 'addCuePoint',
		value: function addCuePoint(text) {
			var event = new MetaEvent({ data: [Constants.META_CUE_POINT] });
			var stringBytes = Utils.stringToBytes(text);
			event.data = event.data.concat(Utils.numberToVariableLength(stringBytes.length)); // Size
			event.data = event.data.concat(stringBytes); // Text
			return this.addEvent(event);
		}

		/**
   * Adds lyric to MIDI file.
   * @param {string} lyric - Lyric text to add.
   * @return {Track}
   */

	}, {
		key: 'addLyric',
		value: function addLyric(lyric) {
			var event = new MetaEvent({ data: [Constants.META_LYRIC_ID] });
			var stringBytes = Utils.stringToBytes(lyric);
			event.data = event.data.concat(Utils.numberToVariableLength(stringBytes.length)); // Size
			event.data = event.data.concat(stringBytes); // Lyric
			return this.addEvent(event);
		}

		/**
   * Channel mode messages
   * @return {Track}
   */

	}, {
		key: 'polyModeOn',
		value: function polyModeOn() {
			var event = new NoteOnEvent({ data: [0x00, 0xB0, 0x7E, 0x00] });
			return this.addEvent(event);
		}
	}]);

	return Track;
}();

exports.Track = Track;
//# sourceMappingURL=data:application/json;base64,
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.Utils = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _tonalMidi = require('tonal-midi');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Static utility functions used throughout the library.
 */
var Utils = function () {
	function Utils() {
		_classCallCheck(this, Utils);
	}

	_createClass(Utils, null, [{
		key: 'version',


		/**
   * Gets MidiWriterJS version number.
   * @return {string}
   */
		value: function version() {
			return Constants.VERSION;
		}

		/**
   * Convert a string to an array of bytes
   * @param {string} string
   * @return {array}
   */

	}, {
		key: 'stringToBytes',
		value: function stringToBytes(string) {
			return string.split('').map(function (char) {
				return char.charCodeAt();
			});
		}

		/**
   * Checks if argument is a valid number.
   * @param {*} n - Value to check
   * @return {boolean}
   */

	}, {
		key: 'isNumeric',
		value: function isNumeric(n) {
			return !isNaN(parseFloat(n)) && isFinite(n);
		}

		/**
      * Returns the correct MIDI number for the specified pitch.
      * Uses Tonal Midi - https://github.com/danigb/tonal/tree/master/packages/midi
      * @param {(string|number)} pitch - 'C#4' or midi note code
      * @return {number}
      */

	}, {
		key: 'getPitch',
		value: function getPitch(pitch) {
			return (0, _tonalMidi.toMidi)(pitch);
		}

		/**
   * Translates number of ticks to MIDI timestamp format, returning an array of
   * hex strings with the time values. Midi has a very particular time to express time,
   * take a good look at the spec before ever touching this function.
   * Thanks to https://github.com/sergi/jsmidi
   *
   * @param {number} ticks - Number of ticks to be translated
   * @return {array} - Bytes that form the MIDI time value
   */

	}, {
		key: 'numberToVariableLength',
		value: function numberToVariableLength(ticks) {
			var buffer = ticks & 0x7F;

			while (ticks = ticks >> 7) {
				buffer <<= 8;
				buffer |= ticks & 0x7F | 0x80;
			}

			var bList = [];
			while (true) {
				bList.push(buffer & 0xff);

				if (buffer & 0x80) buffer >>= 8;else {
					break;
				}
			}

			return bList;
		}

		/**
   * Counts number of bytes in string
   * @param {string} s
   * @return {array}
   */

	}, {
		key: 'stringByteCount',
		value: function stringByteCount(s) {
			return encodeURI(s).split(/%..|./).length - 1;
		}

		/**
   * Get an int from an array of bytes.
   * @param {array} bytes
   * @return {number}
   */

	}, {
		key: 'numberFromBytes',
		value: function numberFromBytes(bytes) {
			var hex = '';
			var stringResult;

			bytes.forEach(function (byte) {
				stringResult = byte.toString(16);

				// ensure string is 2 chars
				if (stringResult.length == 1) stringResult = "0" + stringResult;

				hex += stringResult;
			});

			return parseInt(hex, 16);
		}

		/**
   * Takes a number and splits it up into an array of bytes.  Can be padded by passing a number to bytesNeeded
   * @param {number} number
   * @param {number} bytesNeeded
   * @return {array} - Array of bytes
   */

	}, {
		key: 'numberToBytes',
		value: function numberToBytes(number, bytesNeeded) {
			bytesNeeded = bytesNeeded || 1;

			var hexString = number.toString(16);

			if (hexString.length & 1) {
				// Make sure hex string is even number of chars
				hexString = '0' + hexString;
			}

			// Split hex string into an array of two char elements
			var hexArray = hexString.match(/.{2}/g);

			// Now parse them out as integers
			hexArray = hexArray.map(function (item) {
				return parseInt(item, 16);
			});

			// Prepend empty bytes if we don't have enough
			if (hexArray.length < bytesNeeded) {
				while (bytesNeeded - hexArray.length > 0) {
					hexArray.unshift(0);
				}
			}

			return hexArray;
		}
	}]);

	return Utils;
}();

exports.Utils = Utils;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWxzLmpzIl0sIm5hbWVzIjpbIlV0aWxzIiwiQ29uc3RhbnRzIiwiVkVSU0lPTiIsInN0cmluZyIsInNwbGl0IiwibWFwIiwiY2hhciIsImNoYXJDb2RlQXQiLCJuIiwiaXNOYU4iLCJwYXJzZUZsb2F0IiwiaXNGaW5pdGUiLCJwaXRjaCIsInRpY2tzIiwiYnVmZmVyIiwiYkxpc3QiLCJwdXNoIiwicyIsImVuY29kZVVSSSIsImxlbmd0aCIsImJ5dGVzIiwiaGV4Iiwic3RyaW5nUmVzdWx0IiwiZm9yRWFjaCIsImJ5dGUiLCJ0b1N0cmluZyIsInBhcnNlSW50IiwibnVtYmVyIiwiYnl0ZXNOZWVkZWQiLCJoZXhTdHJpbmciLCJoZXhBcnJheSIsIm1hdGNoIiwiaXRlbSIsInVuc2hpZnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOzs7O0FBRUE7OztJQUdNQSxLOzs7Ozs7Ozs7QUFFTDs7Ozs0QkFJaUI7QUFDaEIsVUFBT0MsVUFBVUMsT0FBakI7QUFDQTs7QUFFRDs7Ozs7Ozs7Z0NBS3FCQyxNLEVBQVE7QUFDNUIsVUFBT0EsT0FBT0MsS0FBUCxDQUFhLEVBQWIsRUFBaUJDLEdBQWpCLENBQXFCO0FBQUEsV0FBUUMsS0FBS0MsVUFBTCxFQUFSO0FBQUEsSUFBckIsQ0FBUDtBQUNBOztBQUVEOzs7Ozs7Ozs0QkFLaUJDLEMsRUFBRztBQUNuQixVQUFPLENBQUNDLE1BQU1DLFdBQVdGLENBQVgsQ0FBTixDQUFELElBQXlCRyxTQUFTSCxDQUFULENBQWhDO0FBQ0E7O0FBRUQ7Ozs7Ozs7OzsyQkFNb0JJLEssRUFBTztBQUN0QixVQUFPLHVCQUFPQSxLQUFQLENBQVA7QUFDQTs7QUFFTDs7Ozs7Ozs7Ozs7O3lDQVM4QkMsSyxFQUFPO0FBQ2pDLE9BQUlDLFNBQVNELFFBQVEsSUFBckI7O0FBRUEsVUFBT0EsUUFBUUEsU0FBUyxDQUF4QixFQUEyQjtBQUN2QkMsZUFBVyxDQUFYO0FBQ0FBLGNBQVlELFFBQVEsSUFBVCxHQUFpQixJQUE1QjtBQUNIOztBQUVELE9BQUlFLFFBQVEsRUFBWjtBQUNBLFVBQU8sSUFBUCxFQUFhO0FBQ1RBLFVBQU1DLElBQU4sQ0FBV0YsU0FBUyxJQUFwQjs7QUFFQSxRQUFJQSxTQUFTLElBQWIsRUFBbUJBLFdBQVcsQ0FBWCxDQUFuQixLQUNLO0FBQUU7QUFBUTtBQUNsQjs7QUFFRCxVQUFPQyxLQUFQO0FBQ0g7O0FBRUQ7Ozs7Ozs7O2tDQUt1QkUsQyxFQUFHO0FBQ3pCLFVBQU9DLFVBQVVELENBQVYsRUFBYWIsS0FBYixDQUFtQixPQUFuQixFQUE0QmUsTUFBNUIsR0FBcUMsQ0FBNUM7QUFDQTs7QUFFRDs7Ozs7Ozs7a0NBS3VCQyxLLEVBQU87QUFDN0IsT0FBSUMsTUFBTSxFQUFWO0FBQ0EsT0FBSUMsWUFBSjs7QUFFQUYsU0FBTUcsT0FBTixDQUFjLFVBQVNDLElBQVQsRUFBZTtBQUM1QkYsbUJBQWVFLEtBQUtDLFFBQUwsQ0FBYyxFQUFkLENBQWY7O0FBRUE7QUFDQSxRQUFJSCxhQUFhSCxNQUFiLElBQXVCLENBQTNCLEVBQThCRyxlQUFlLE1BQU1BLFlBQXJCOztBQUU5QkQsV0FBT0MsWUFBUDtBQUNBLElBUEQ7O0FBU0EsVUFBT0ksU0FBU0wsR0FBVCxFQUFjLEVBQWQsQ0FBUDtBQUNBOztBQUVEOzs7Ozs7Ozs7Z0NBTXFCTSxNLEVBQVFDLFcsRUFBYTtBQUN6Q0EsaUJBQWNBLGVBQWUsQ0FBN0I7O0FBRUEsT0FBSUMsWUFBWUYsT0FBT0YsUUFBUCxDQUFnQixFQUFoQixDQUFoQjs7QUFFQSxPQUFJSSxVQUFVVixNQUFWLEdBQW1CLENBQXZCLEVBQTBCO0FBQUU7QUFDM0JVLGdCQUFZLE1BQU1BLFNBQWxCO0FBQ0E7O0FBRUQ7QUFDQSxPQUFJQyxXQUFXRCxVQUFVRSxLQUFWLENBQWdCLE9BQWhCLENBQWY7O0FBRUE7QUFDQUQsY0FBV0EsU0FBU3pCLEdBQVQsQ0FBYTtBQUFBLFdBQVFxQixTQUFTTSxJQUFULEVBQWUsRUFBZixDQUFSO0FBQUEsSUFBYixDQUFYOztBQUVBO0FBQ0EsT0FBSUYsU0FBU1gsTUFBVCxHQUFrQlMsV0FBdEIsRUFBbUM7QUFDbEMsV0FBT0EsY0FBY0UsU0FBU1gsTUFBdkIsR0FBZ0MsQ0FBdkMsRUFBMEM7QUFDekNXLGNBQVNHLE9BQVQsQ0FBaUIsQ0FBakI7QUFDQTtBQUNEOztBQUVELFVBQU9ILFFBQVA7QUFDQTs7Ozs7O1FBR005QixLLEdBQUFBLEsiLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3RvTWlkaX0gZnJvbSAndG9uYWwtbWlkaSc7XG5cbi8qKlxuICogU3RhdGljIHV0aWxpdHkgZnVuY3Rpb25zIHVzZWQgdGhyb3VnaG91dCB0aGUgbGlicmFyeS5cbiAqL1xuY2xhc3MgVXRpbHMge1xuXG5cdC8qKlxuXHQgKiBHZXRzIE1pZGlXcml0ZXJKUyB2ZXJzaW9uIG51bWJlci5cblx0ICogQHJldHVybiB7c3RyaW5nfVxuXHQgKi9cblx0c3RhdGljIHZlcnNpb24oKSB7XG5cdFx0cmV0dXJuIENvbnN0YW50cy5WRVJTSU9OO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnQgYSBzdHJpbmcgdG8gYW4gYXJyYXkgb2YgYnl0ZXNcblx0ICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuXHQgKiBAcmV0dXJuIHthcnJheX1cblx0ICovXG5cdHN0YXRpYyBzdHJpbmdUb0J5dGVzKHN0cmluZykge1xuXHRcdHJldHVybiBzdHJpbmcuc3BsaXQoJycpLm1hcChjaGFyID0+IGNoYXIuY2hhckNvZGVBdCgpKVxuXHR9XG5cblx0LyoqXG5cdCAqIENoZWNrcyBpZiBhcmd1bWVudCBpcyBhIHZhbGlkIG51bWJlci5cblx0ICogQHBhcmFtIHsqfSBuIC0gVmFsdWUgdG8gY2hlY2tcblx0ICogQHJldHVybiB7Ym9vbGVhbn1cblx0ICovXG5cdHN0YXRpYyBpc051bWVyaWMobikge1xuXHRcdHJldHVybiAhaXNOYU4ocGFyc2VGbG9hdChuKSkgJiYgaXNGaW5pdGUobilcblx0fVxuXG5cdC8qKlxuICAgICAqIFJldHVybnMgdGhlIGNvcnJlY3QgTUlESSBudW1iZXIgZm9yIHRoZSBzcGVjaWZpZWQgcGl0Y2guXG4gICAgICogVXNlcyBUb25hbCBNaWRpIC0gaHR0cHM6Ly9naXRodWIuY29tL2RhbmlnYi90b25hbC90cmVlL21hc3Rlci9wYWNrYWdlcy9taWRpXG4gICAgICogQHBhcmFtIHsoc3RyaW5nfG51bWJlcil9IHBpdGNoIC0gJ0MjNCcgb3IgbWlkaSBub3RlIGNvZGVcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAgICovXG4gICAgIHN0YXRpYyBnZXRQaXRjaChwaXRjaCkge1xuICAgICBcdHJldHVybiB0b01pZGkocGl0Y2gpO1xuICAgICB9XG5cblx0LyoqXG5cdCAqIFRyYW5zbGF0ZXMgbnVtYmVyIG9mIHRpY2tzIHRvIE1JREkgdGltZXN0YW1wIGZvcm1hdCwgcmV0dXJuaW5nIGFuIGFycmF5IG9mXG5cdCAqIGhleCBzdHJpbmdzIHdpdGggdGhlIHRpbWUgdmFsdWVzLiBNaWRpIGhhcyBhIHZlcnkgcGFydGljdWxhciB0aW1lIHRvIGV4cHJlc3MgdGltZSxcblx0ICogdGFrZSBhIGdvb2QgbG9vayBhdCB0aGUgc3BlYyBiZWZvcmUgZXZlciB0b3VjaGluZyB0aGlzIGZ1bmN0aW9uLlxuXHQgKiBUaGFua3MgdG8gaHR0cHM6Ly9naXRodWIuY29tL3NlcmdpL2pzbWlkaVxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gdGlja3MgLSBOdW1iZXIgb2YgdGlja3MgdG8gYmUgdHJhbnNsYXRlZFxuXHQgKiBAcmV0dXJuIHthcnJheX0gLSBCeXRlcyB0aGF0IGZvcm0gdGhlIE1JREkgdGltZSB2YWx1ZVxuXHQgKi9cblx0c3RhdGljIG51bWJlclRvVmFyaWFibGVMZW5ndGgodGlja3MpIHtcblx0ICAgIHZhciBidWZmZXIgPSB0aWNrcyAmIDB4N0Y7XG5cblx0ICAgIHdoaWxlICh0aWNrcyA9IHRpY2tzID4+IDcpIHtcblx0ICAgICAgICBidWZmZXIgPDw9IDg7XG5cdCAgICAgICAgYnVmZmVyIHw9ICgodGlja3MgJiAweDdGKSB8IDB4ODApO1xuXHQgICAgfVxuXG5cdCAgICB2YXIgYkxpc3QgPSBbXTtcblx0ICAgIHdoaWxlICh0cnVlKSB7XG5cdCAgICAgICAgYkxpc3QucHVzaChidWZmZXIgJiAweGZmKTtcblxuXHQgICAgICAgIGlmIChidWZmZXIgJiAweDgwKSBidWZmZXIgPj49IDhcblx0ICAgICAgICBlbHNlIHsgYnJlYWs7IH1cblx0ICAgIH1cblxuXHQgICAgcmV0dXJuIGJMaXN0O1xuXHR9XG5cblx0LyoqXG5cdCAqIENvdW50cyBudW1iZXIgb2YgYnl0ZXMgaW4gc3RyaW5nXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBzXG5cdCAqIEByZXR1cm4ge2FycmF5fVxuXHQgKi9cblx0c3RhdGljIHN0cmluZ0J5dGVDb3VudChzKSB7XG5cdFx0cmV0dXJuIGVuY29kZVVSSShzKS5zcGxpdCgvJS4ufC4vKS5sZW5ndGggLSAxXG5cdH1cblxuXHQvKipcblx0ICogR2V0IGFuIGludCBmcm9tIGFuIGFycmF5IG9mIGJ5dGVzLlxuXHQgKiBAcGFyYW0ge2FycmF5fSBieXRlc1xuXHQgKiBAcmV0dXJuIHtudW1iZXJ9XG5cdCAqL1xuXHRzdGF0aWMgbnVtYmVyRnJvbUJ5dGVzKGJ5dGVzKSB7XG5cdFx0dmFyIGhleCA9ICcnO1xuXHRcdHZhciBzdHJpbmdSZXN1bHQ7XG5cblx0XHRieXRlcy5mb3JFYWNoKGZ1bmN0aW9uKGJ5dGUpIHtcblx0XHRcdHN0cmluZ1Jlc3VsdCA9IGJ5dGUudG9TdHJpbmcoMTYpO1xuXG5cdFx0XHQvLyBlbnN1cmUgc3RyaW5nIGlzIDIgY2hhcnNcblx0XHRcdGlmIChzdHJpbmdSZXN1bHQubGVuZ3RoID09IDEpIHN0cmluZ1Jlc3VsdCA9IFwiMFwiICsgc3RyaW5nUmVzdWx0XG5cblx0XHRcdGhleCArPSBzdHJpbmdSZXN1bHQ7XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gcGFyc2VJbnQoaGV4LCAxNik7XG5cdH1cblxuXHQvKipcblx0ICogVGFrZXMgYSBudW1iZXIgYW5kIHNwbGl0cyBpdCB1cCBpbnRvIGFuIGFycmF5IG9mIGJ5dGVzLiAgQ2FuIGJlIHBhZGRlZCBieSBwYXNzaW5nIGEgbnVtYmVyIHRvIGJ5dGVzTmVlZGVkXG5cdCAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXJcblx0ICogQHBhcmFtIHtudW1iZXJ9IGJ5dGVzTmVlZGVkXG5cdCAqIEByZXR1cm4ge2FycmF5fSAtIEFycmF5IG9mIGJ5dGVzXG5cdCAqL1xuXHRzdGF0aWMgbnVtYmVyVG9CeXRlcyhudW1iZXIsIGJ5dGVzTmVlZGVkKSB7XG5cdFx0Ynl0ZXNOZWVkZWQgPSBieXRlc05lZWRlZCB8fCAxO1xuXG5cdFx0dmFyIGhleFN0cmluZyA9IG51bWJlci50b1N0cmluZygxNik7XG5cblx0XHRpZiAoaGV4U3RyaW5nLmxlbmd0aCAmIDEpIHsgLy8gTWFrZSBzdXJlIGhleCBzdHJpbmcgaXMgZXZlbiBudW1iZXIgb2YgY2hhcnNcblx0XHRcdGhleFN0cmluZyA9ICcwJyArIGhleFN0cmluZztcblx0XHR9XG5cblx0XHQvLyBTcGxpdCBoZXggc3RyaW5nIGludG8gYW4gYXJyYXkgb2YgdHdvIGNoYXIgZWxlbWVudHNcblx0XHR2YXIgaGV4QXJyYXkgPSBoZXhTdHJpbmcubWF0Y2goLy57Mn0vZyk7XG5cblx0XHQvLyBOb3cgcGFyc2UgdGhlbSBvdXQgYXMgaW50ZWdlcnNcblx0XHRoZXhBcnJheSA9IGhleEFycmF5Lm1hcChpdGVtID0+IHBhcnNlSW50KGl0ZW0sIDE2KSlcblxuXHRcdC8vIFByZXBlbmQgZW1wdHkgYnl0ZXMgaWYgd2UgZG9uJ3QgaGF2ZSBlbm91Z2hcblx0XHRpZiAoaGV4QXJyYXkubGVuZ3RoIDwgYnl0ZXNOZWVkZWQpIHtcblx0XHRcdHdoaWxlIChieXRlc05lZWRlZCAtIGhleEFycmF5Lmxlbmd0aCA+IDApIHtcblx0XHRcdFx0aGV4QXJyYXkudW5zaGlmdCgwKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gaGV4QXJyYXk7XG5cdH1cbn1cblxuZXhwb3J0IHtVdGlsc307XG4iXX0=
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var VexFlow = function () {
	function VexFlow() {
		_classCallCheck(this, VexFlow);
	}
	// code...


	/**
  * Support for converting VexFlow voice into MidiWriterJS track
  * @return MidiWritier.Track object
  */


	_createClass(VexFlow, [{
		key: 'trackFromVoice',
		value: function trackFromVoice(voice) {
			var track = new Track();
			var wait;
			var pitches = [];

			voice.tickables.forEach(function (tickable, i) {
				pitches = [];

				if (tickable.noteType === 'n') {
					notes[i].keys.forEach(function (key) {
						// build array of pitches
						pitches.push(this.convertPitch(key));
					});
				} else if (tickable.noteType === 'r') {
					// move on to the next tickable and use this rest as a `wait` property for the next event
					wait = this.convertDuration(tickable);
					return;
				}

				track.addEvent(new NoteEvent({ pitch: pitches, duration: this.convertDuration(voice.tickables[i]), wait: wait }));

				// reset wait
				wait = 0;
			});

			return track;
		}

		/**
   * Converts VexFlow pitch syntax to MidiWriterJS syntax
   * @param pitch string
   */

	}, {
		key: 'convertPitch',
		value: function convertPitch(pitch) {
			return pitch.replace('/', '');
		}

		/**
   * Converts VexFlow duration syntax to MidiWriterJS syntax
   * @param note struct from VexFlow
   */

	}, {
		key: 'convertDuration',
		value: function convertDuration(note) {
			switch (note.duration) {
				case 'w':
					return '1';
				case 'h':
					return note.isDotted() ? 'd2' : '2';
				case 'q':
					return note.isDotted() ? 'd4' : '4';
				case '8':
					return note.isDotted() ? 'd8' : '8';
			}

			return note.duration;
		}
	}]);

	return VexFlow;
}();

exports.VexFlow = VexFlow;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZleGZsb3cuanMiXSwibmFtZXMiOlsiVmV4RmxvdyIsInZvaWNlIiwidHJhY2siLCJUcmFjayIsIndhaXQiLCJwaXRjaGVzIiwidGlja2FibGVzIiwiZm9yRWFjaCIsInRpY2thYmxlIiwiaSIsIm5vdGVUeXBlIiwibm90ZXMiLCJrZXlzIiwia2V5IiwicHVzaCIsImNvbnZlcnRQaXRjaCIsImNvbnZlcnREdXJhdGlvbiIsImFkZEV2ZW50IiwiTm90ZUV2ZW50IiwicGl0Y2giLCJkdXJhdGlvbiIsInJlcGxhY2UiLCJub3RlIiwiaXNEb3R0ZWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7SUFBTUEsTztBQUVMLG9CQUFjO0FBQUE7QUFFYjtBQURBOzs7QUFHRDs7Ozs7Ozs7aUNBSWVDLEssRUFBTztBQUNyQixPQUFJQyxRQUFRLElBQUlDLEtBQUosRUFBWjtBQUNBLE9BQUlDLElBQUo7QUFDQSxPQUFJQyxVQUFVLEVBQWQ7O0FBRUFKLFNBQU1LLFNBQU4sQ0FBZ0JDLE9BQWhCLENBQXdCLFVBQVNDLFFBQVQsRUFBbUJDLENBQW5CLEVBQXNCO0FBQzdDSixjQUFVLEVBQVY7O0FBRUEsUUFBSUcsU0FBU0UsUUFBVCxLQUFzQixHQUExQixFQUErQjtBQUM5QkMsV0FBTUYsQ0FBTixFQUFTRyxJQUFULENBQWNMLE9BQWQsQ0FBc0IsVUFBU00sR0FBVCxFQUFjO0FBQ25DO0FBQ0FSLGNBQVFTLElBQVIsQ0FBYSxLQUFLQyxZQUFMLENBQWtCRixHQUFsQixDQUFiO0FBQ0EsTUFIRDtBQUtBLEtBTkQsTUFNTyxJQUFJTCxTQUFTRSxRQUFULEtBQXNCLEdBQTFCLEVBQStCO0FBQ3JDO0FBQ0FOLFlBQU8sS0FBS1ksZUFBTCxDQUFxQlIsUUFBckIsQ0FBUDtBQUNBO0FBQ0E7O0FBRUROLFVBQU1lLFFBQU4sQ0FBZSxJQUFJQyxTQUFKLENBQWMsRUFBQ0MsT0FBT2QsT0FBUixFQUFpQmUsVUFBVSxLQUFLSixlQUFMLENBQXFCZixNQUFNSyxTQUFOLENBQWdCRyxDQUFoQixDQUFyQixDQUEzQixFQUFxRUwsTUFBTUEsSUFBM0UsRUFBZCxDQUFmOztBQUVBO0FBQ0FBLFdBQU8sQ0FBUDtBQUNBLElBbkJEOztBQXFCQSxVQUFPRixLQUFQO0FBQ0E7O0FBR0Q7Ozs7Ozs7K0JBSWFpQixLLEVBQU87QUFDbkIsVUFBT0EsTUFBTUUsT0FBTixDQUFjLEdBQWQsRUFBbUIsRUFBbkIsQ0FBUDtBQUNBOztBQUdEOzs7Ozs7O2tDQUlnQkMsSSxFQUFNO0FBQ3JCLFdBQVFBLEtBQUtGLFFBQWI7QUFDQyxTQUFLLEdBQUw7QUFDQyxZQUFPLEdBQVA7QUFDRCxTQUFLLEdBQUw7QUFDQyxZQUFPRSxLQUFLQyxRQUFMLEtBQWtCLElBQWxCLEdBQXlCLEdBQWhDO0FBQ0QsU0FBSyxHQUFMO0FBQ0MsWUFBT0QsS0FBS0MsUUFBTCxLQUFrQixJQUFsQixHQUF5QixHQUFoQztBQUNELFNBQUssR0FBTDtBQUNDLFlBQU9ELEtBQUtDLFFBQUwsS0FBa0IsSUFBbEIsR0FBeUIsR0FBaEM7QUFSRjs7QUFXQSxVQUFPRCxLQUFLRixRQUFaO0FBQ0E7Ozs7OztRQUdNcEIsTyxHQUFBQSxPIiwiZmlsZSI6InZleGZsb3cuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBWZXhGbG93IHtcblx0XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdC8vIGNvZGUuLi5cblx0fVxuXG5cdC8qKlxuXHQgKiBTdXBwb3J0IGZvciBjb252ZXJ0aW5nIFZleEZsb3cgdm9pY2UgaW50byBNaWRpV3JpdGVySlMgdHJhY2tcblx0ICogQHJldHVybiBNaWRpV3JpdGllci5UcmFjayBvYmplY3Rcblx0ICovXG5cdHRyYWNrRnJvbVZvaWNlKHZvaWNlKSB7XG5cdFx0dmFyIHRyYWNrID0gbmV3IFRyYWNrKCk7XG5cdFx0dmFyIHdhaXQ7XG5cdFx0dmFyIHBpdGNoZXMgPSBbXTtcblxuXHRcdHZvaWNlLnRpY2thYmxlcy5mb3JFYWNoKGZ1bmN0aW9uKHRpY2thYmxlLCBpKSB7XG5cdFx0XHRwaXRjaGVzID0gW107XG5cblx0XHRcdGlmICh0aWNrYWJsZS5ub3RlVHlwZSA9PT0gJ24nKSB7XG5cdFx0XHRcdG5vdGVzW2ldLmtleXMuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcblx0XHRcdFx0XHQvLyBidWlsZCBhcnJheSBvZiBwaXRjaGVzXG5cdFx0XHRcdFx0cGl0Y2hlcy5wdXNoKHRoaXMuY29udmVydFBpdGNoKGtleSkpO1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0fSBlbHNlIGlmICh0aWNrYWJsZS5ub3RlVHlwZSA9PT0gJ3InKSB7XG5cdFx0XHRcdC8vIG1vdmUgb24gdG8gdGhlIG5leHQgdGlja2FibGUgYW5kIHVzZSB0aGlzIHJlc3QgYXMgYSBgd2FpdGAgcHJvcGVydHkgZm9yIHRoZSBuZXh0IGV2ZW50XG5cdFx0XHRcdHdhaXQgPSB0aGlzLmNvbnZlcnREdXJhdGlvbih0aWNrYWJsZSk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dHJhY2suYWRkRXZlbnQobmV3IE5vdGVFdmVudCh7cGl0Y2g6IHBpdGNoZXMsIGR1cmF0aW9uOiB0aGlzLmNvbnZlcnREdXJhdGlvbih2b2ljZS50aWNrYWJsZXNbaV0pLCB3YWl0OiB3YWl0fSkpO1xuXHRcdFx0XG5cdFx0XHQvLyByZXNldCB3YWl0XG5cdFx0XHR3YWl0ID0gMDtcblx0XHR9KTtcblxuXHRcdHJldHVybiB0cmFjaztcblx0fVxuXG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIFZleEZsb3cgcGl0Y2ggc3ludGF4IHRvIE1pZGlXcml0ZXJKUyBzeW50YXhcblx0ICogQHBhcmFtIHBpdGNoIHN0cmluZ1xuXHQgKi9cblx0Y29udmVydFBpdGNoKHBpdGNoKSB7XG5cdFx0cmV0dXJuIHBpdGNoLnJlcGxhY2UoJy8nLCAnJyk7XG5cdH0gXG5cblxuXHQvKipcblx0ICogQ29udmVydHMgVmV4RmxvdyBkdXJhdGlvbiBzeW50YXggdG8gTWlkaVdyaXRlckpTIHN5bnRheFxuXHQgKiBAcGFyYW0gbm90ZSBzdHJ1Y3QgZnJvbSBWZXhGbG93XG5cdCAqL1xuXHRjb252ZXJ0RHVyYXRpb24obm90ZSkge1xuXHRcdHN3aXRjaCAobm90ZS5kdXJhdGlvbikge1xuXHRcdFx0Y2FzZSAndyc6XG5cdFx0XHRcdHJldHVybiAnMSc7XG5cdFx0XHRjYXNlICdoJzpcblx0XHRcdFx0cmV0dXJuIG5vdGUuaXNEb3R0ZWQoKSA/ICdkMicgOiAnMic7XG5cdFx0XHRjYXNlICdxJzpcblx0XHRcdFx0cmV0dXJuIG5vdGUuaXNEb3R0ZWQoKSA/ICdkNCcgOiAnNCc7XG5cdFx0XHRjYXNlICc4Jzpcblx0XHRcdFx0cmV0dXJuIG5vdGUuaXNEb3R0ZWQoKSA/ICdkOCcgOiAnOCc7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG5vdGUuZHVyYXRpb247XG5cdH07XG59XG5cbmV4cG9ydCB7VmV4Rmxvd307XG4iXX0=
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Object that puts together tracks and provides methods for file output.
 * @param {array} tracks - An array of {Track} objects.
 * @return {Writer}
 */
var Writer = function () {
	function Writer(tracks) {
		_classCallCheck(this, Writer);

		this.data = [];

		var trackType = tracks.length > 1 ? Constants.HEADER_CHUNK_FORMAT1 : Constants.HEADER_CHUNK_FORMAT0;
		var numberOfTracks = Utils.numberToBytes(tracks.length, 2); // two bytes long

		// Header chunk
		this.data.push(new Chunk({
			type: Constants.HEADER_CHUNK_TYPE,
			data: trackType.concat(numberOfTracks, Constants.HEADER_CHUNK_DIVISION) }));

		// Track chunks
		tracks.forEach(function (track, i) {
			track.addEvent(new MetaEvent({ data: Constants.META_END_OF_TRACK_ID }));
			this.data.push(track);
		}, this);
	}

	/**
  * Builds the file into a Uint8Array
  * @return {Uint8Array}
  */


	_createClass(Writer, [{
		key: 'buildFile',
		value: function buildFile() {
			var build = [];

			// Data consists of chunks which consists of data
			this.data.forEach(function (d) {
				return build = build.concat(d.type, d.size, d.data);
			});

			return new Uint8Array(build);
		}

		/**
   * Convert file buffer to a base64 string.  Different methods depending on if browser or node.
   * @return {string}
   */

	}, {
		key: 'base64',
		value: function base64() {
			if (typeof btoa === 'function') return btoa(String.fromCharCode.apply(null, this.buildFile()));
			return new Buffer(this.buildFile()).toString('base64');
		}

		/**
   * Get the data URI.
   * @return {string}
   */

	}, {
		key: 'dataUri',
		value: function dataUri() {
			return 'data:audio/midi;base64,' + this.base64();
		}

		/**
   * Output to stdout
   * @return {string}
   */

	}, {
		key: 'stdout',
		value: function stdout() {
			return process.stdout.write(new Buffer(this.buildFile()));
		}

		/**
   * Save to MIDI file
   * @param {string} filename
   */

	}, {
		key: 'saveMIDI',
		value: function saveMIDI(filename) {
			var buffer = new Buffer(this.buildFile());
			fs.writeFile(filename + '.mid', buffer, function (err) {
				if (err) return console.log(err);
			});
		}
	}]);

	return Writer;
}();

exports.Writer = Writer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndyaXRlci5qcyJdLCJuYW1lcyI6WyJXcml0ZXIiLCJ0cmFja3MiLCJkYXRhIiwidHJhY2tUeXBlIiwibGVuZ3RoIiwiQ29uc3RhbnRzIiwiSEVBREVSX0NIVU5LX0ZPUk1BVDEiLCJIRUFERVJfQ0hVTktfRk9STUFUMCIsIm51bWJlck9mVHJhY2tzIiwiVXRpbHMiLCJudW1iZXJUb0J5dGVzIiwicHVzaCIsIkNodW5rIiwidHlwZSIsIkhFQURFUl9DSFVOS19UWVBFIiwiY29uY2F0IiwiSEVBREVSX0NIVU5LX0RJVklTSU9OIiwiZm9yRWFjaCIsInRyYWNrIiwiaSIsImFkZEV2ZW50IiwiTWV0YUV2ZW50IiwiTUVUQV9FTkRfT0ZfVFJBQ0tfSUQiLCJidWlsZCIsImQiLCJzaXplIiwiVWludDhBcnJheSIsImJ0b2EiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJhcHBseSIsImJ1aWxkRmlsZSIsIkJ1ZmZlciIsInRvU3RyaW5nIiwiYmFzZTY0IiwicHJvY2VzcyIsInN0ZG91dCIsIndyaXRlIiwiZmlsZW5hbWUiLCJidWZmZXIiLCJmcyIsIndyaXRlRmlsZSIsImVyciIsImNvbnNvbGUiLCJsb2ciXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTs7Ozs7SUFLTUEsTTtBQUNMLGlCQUFZQyxNQUFaLEVBQW9CO0FBQUE7O0FBQ25CLE9BQUtDLElBQUwsR0FBWSxFQUFaOztBQUVBLE1BQUlDLFlBQVlGLE9BQU9HLE1BQVAsR0FBZ0IsQ0FBaEIsR0FBb0JDLFVBQVVDLG9CQUE5QixHQUFxREQsVUFBVUUsb0JBQS9FO0FBQ0EsTUFBSUMsaUJBQWlCQyxNQUFNQyxhQUFOLENBQW9CVCxPQUFPRyxNQUEzQixFQUFtQyxDQUFuQyxDQUFyQixDQUptQixDQUl5Qzs7QUFFNUQ7QUFDQSxPQUFLRixJQUFMLENBQVVTLElBQVYsQ0FBZSxJQUFJQyxLQUFKLENBQVU7QUFDbkJDLFNBQU1SLFVBQVVTLGlCQURHO0FBRW5CWixTQUFNQyxVQUFVWSxNQUFWLENBQWlCUCxjQUFqQixFQUFpQ0gsVUFBVVcscUJBQTNDLENBRmEsRUFBVixDQUFmOztBQUlBO0FBQ0FmLFNBQU9nQixPQUFQLENBQWUsVUFBU0MsS0FBVCxFQUFnQkMsQ0FBaEIsRUFBbUI7QUFDakNELFNBQU1FLFFBQU4sQ0FBZSxJQUFJQyxTQUFKLENBQWMsRUFBQ25CLE1BQU1HLFVBQVVpQixvQkFBakIsRUFBZCxDQUFmO0FBQ0EsUUFBS3BCLElBQUwsQ0FBVVMsSUFBVixDQUFlTyxLQUFmO0FBQ0EsR0FIRCxFQUdHLElBSEg7QUFJQTs7QUFFRDs7Ozs7Ozs7OEJBSVk7QUFDWCxPQUFJSyxRQUFRLEVBQVo7O0FBRUE7QUFDQSxRQUFLckIsSUFBTCxDQUFVZSxPQUFWLENBQWtCLFVBQUNPLENBQUQ7QUFBQSxXQUFPRCxRQUFRQSxNQUFNUixNQUFOLENBQWFTLEVBQUVYLElBQWYsRUFBcUJXLEVBQUVDLElBQXZCLEVBQTZCRCxFQUFFdEIsSUFBL0IsQ0FBZjtBQUFBLElBQWxCOztBQUVBLFVBQU8sSUFBSXdCLFVBQUosQ0FBZUgsS0FBZixDQUFQO0FBQ0E7O0FBRUQ7Ozs7Ozs7MkJBSVM7QUFDUixPQUFJLE9BQU9JLElBQVAsS0FBZ0IsVUFBcEIsRUFBZ0MsT0FBT0EsS0FBS0MsT0FBT0MsWUFBUCxDQUFvQkMsS0FBcEIsQ0FBMEIsSUFBMUIsRUFBZ0MsS0FBS0MsU0FBTCxFQUFoQyxDQUFMLENBQVA7QUFDaEMsVUFBTyxJQUFJQyxNQUFKLENBQVcsS0FBS0QsU0FBTCxFQUFYLEVBQTZCRSxRQUE3QixDQUFzQyxRQUF0QyxDQUFQO0FBQ0E7O0FBRUU7Ozs7Ozs7NEJBSVU7QUFDVCxVQUFPLDRCQUE0QixLQUFLQyxNQUFMLEVBQW5DO0FBQ0E7O0FBRUo7Ozs7Ozs7MkJBSVk7QUFDUixVQUFPQyxRQUFRQyxNQUFSLENBQWVDLEtBQWYsQ0FBcUIsSUFBSUwsTUFBSixDQUFXLEtBQUtELFNBQUwsRUFBWCxDQUFyQixDQUFQO0FBQ0E7O0FBRUo7Ozs7Ozs7MkJBSVNPLFEsRUFBVTtBQUNsQixPQUFJQyxTQUFTLElBQUlQLE1BQUosQ0FBVyxLQUFLRCxTQUFMLEVBQVgsQ0FBYjtBQUNBUyxNQUFHQyxTQUFILENBQWFILFdBQVcsTUFBeEIsRUFBZ0NDLE1BQWhDLEVBQXdDLFVBQVVHLEdBQVYsRUFBZTtBQUN0RCxRQUFHQSxHQUFILEVBQVEsT0FBT0MsUUFBUUMsR0FBUixDQUFZRixHQUFaLENBQVA7QUFDUixJQUZEO0FBR0E7Ozs7OztRQUdNMUMsTSxHQUFBQSxNIiwiZmlsZSI6IndyaXRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogT2JqZWN0IHRoYXQgcHV0cyB0b2dldGhlciB0cmFja3MgYW5kIHByb3ZpZGVzIG1ldGhvZHMgZm9yIGZpbGUgb3V0cHV0LlxuICogQHBhcmFtIHthcnJheX0gdHJhY2tzIC0gQW4gYXJyYXkgb2Yge1RyYWNrfSBvYmplY3RzLlxuICogQHJldHVybiB7V3JpdGVyfVxuICovXG5jbGFzcyBXcml0ZXIge1xuXHRjb25zdHJ1Y3Rvcih0cmFja3MpIHtcblx0XHR0aGlzLmRhdGEgPSBbXTtcblxuXHRcdHZhciB0cmFja1R5cGUgPSB0cmFja3MubGVuZ3RoID4gMSA/IENvbnN0YW50cy5IRUFERVJfQ0hVTktfRk9STUFUMSA6IENvbnN0YW50cy5IRUFERVJfQ0hVTktfRk9STUFUMDtcblx0XHR2YXIgbnVtYmVyT2ZUcmFja3MgPSBVdGlscy5udW1iZXJUb0J5dGVzKHRyYWNrcy5sZW5ndGgsIDIpOyAvLyB0d28gYnl0ZXMgbG9uZ1xuXG5cdFx0Ly8gSGVhZGVyIGNodW5rXG5cdFx0dGhpcy5kYXRhLnB1c2gobmV3IENodW5rKHtcblx0XHRcdFx0XHRcdFx0XHR0eXBlOiBDb25zdGFudHMuSEVBREVSX0NIVU5LX1RZUEUsXG5cdFx0XHRcdFx0XHRcdFx0ZGF0YTogdHJhY2tUeXBlLmNvbmNhdChudW1iZXJPZlRyYWNrcywgQ29uc3RhbnRzLkhFQURFUl9DSFVOS19ESVZJU0lPTil9KSk7XG5cblx0XHQvLyBUcmFjayBjaHVua3Ncblx0XHR0cmFja3MuZm9yRWFjaChmdW5jdGlvbih0cmFjaywgaSkge1xuXHRcdFx0dHJhY2suYWRkRXZlbnQobmV3IE1ldGFFdmVudCh7ZGF0YTogQ29uc3RhbnRzLk1FVEFfRU5EX09GX1RSQUNLX0lEfSkpO1xuXHRcdFx0dGhpcy5kYXRhLnB1c2godHJhY2spO1xuXHRcdH0sIHRoaXMpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEJ1aWxkcyB0aGUgZmlsZSBpbnRvIGEgVWludDhBcnJheVxuXHQgKiBAcmV0dXJuIHtVaW50OEFycmF5fVxuXHQgKi9cblx0YnVpbGRGaWxlKCkge1xuXHRcdHZhciBidWlsZCA9IFtdO1xuXG5cdFx0Ly8gRGF0YSBjb25zaXN0cyBvZiBjaHVua3Mgd2hpY2ggY29uc2lzdHMgb2YgZGF0YVxuXHRcdHRoaXMuZGF0YS5mb3JFYWNoKChkKSA9PiBidWlsZCA9IGJ1aWxkLmNvbmNhdChkLnR5cGUsIGQuc2l6ZSwgZC5kYXRhKSk7XG5cblx0XHRyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYnVpbGQpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnQgZmlsZSBidWZmZXIgdG8gYSBiYXNlNjQgc3RyaW5nLiAgRGlmZmVyZW50IG1ldGhvZHMgZGVwZW5kaW5nIG9uIGlmIGJyb3dzZXIgb3Igbm9kZS5cblx0ICogQHJldHVybiB7c3RyaW5nfVxuXHQgKi9cblx0YmFzZTY0KCkge1xuXHRcdGlmICh0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIGJ0b2EoU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCB0aGlzLmJ1aWxkRmlsZSgpKSk7XG5cdFx0cmV0dXJuIG5ldyBCdWZmZXIodGhpcy5idWlsZEZpbGUoKSkudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuXHR9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGRhdGEgVVJJLlxuICAgICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICAgKi9cbiAgICBkYXRhVXJpKCkge1xuICAgIFx0cmV0dXJuICdkYXRhOmF1ZGlvL21pZGk7YmFzZTY0LCcgKyB0aGlzLmJhc2U2NCgpO1xuICAgIH1cblxuXHQvKipcblx0ICogT3V0cHV0IHRvIHN0ZG91dFxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9XG5cdCAqL1xuICAgIHN0ZG91dCgpIHtcbiAgICBcdHJldHVybiBwcm9jZXNzLnN0ZG91dC53cml0ZShuZXcgQnVmZmVyKHRoaXMuYnVpbGRGaWxlKCkpKTtcbiAgICB9XG5cblx0LyoqXG5cdCAqIFNhdmUgdG8gTUlESSBmaWxlXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlbmFtZVxuXHQgKi9cblx0c2F2ZU1JREkoZmlsZW5hbWUpIHtcblx0XHR2YXIgYnVmZmVyID0gbmV3IEJ1ZmZlcih0aGlzLmJ1aWxkRmlsZSgpKTtcblx0XHRmcy53cml0ZUZpbGUoZmlsZW5hbWUgKyAnLm1pZCcsIGJ1ZmZlciwgZnVuY3Rpb24gKGVycikge1xuXHRcdFx0aWYoZXJyKSByZXR1cm4gY29uc29sZS5sb2coZXJyKTtcblx0XHR9KTtcblx0fVxufVxuXG5leHBvcnQge1dyaXRlcn07XG4iXX0=
